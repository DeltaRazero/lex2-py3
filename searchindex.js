Search.setIndex({"docnames": ["_autosummary/lex2", "_autosummary/lex2.excs", "_autosummary/lex2.lexer", "_autosummary/lex2.matcher", "_autosummary/lex2.predefs", "_autosummary/lex2.textio", "_autosummary/lex2.util", "_autosummary/lex2.util.deps", "_autosummary/lex2.util.types", "api", "docs/01_installing", "docs/02_defining_rulesets", "docs/03_lexer_usage", "docs/04_customizing_regex_engine", "docs/05_miscellaneous", "index"], "filenames": ["_autosummary/lex2.rst", "_autosummary/lex2.excs.rst", "_autosummary/lex2.lexer.rst", "_autosummary/lex2.matcher.rst", "_autosummary/lex2.predefs.rst", "_autosummary/lex2.textio.rst", "_autosummary/lex2.util.rst", "_autosummary/lex2.util.deps.rst", "_autosummary/lex2.util.types.rst", "api.rst", "docs/01_installing.rst", "docs/02_defining_rulesets.rst", "docs/03_lexer_usage.rst", "docs/04_customizing_regex_engine.rst", "docs/05_miscellaneous.rst", "index.rst"], "titles": ["lex2", "lex2.excs", "lex2.lexer", "lex2.matcher", "lex2.predefs", "lex2.textio", "lex2.util", "lex2.util.deps", "lex2.util.types", "&lt;no title&gt;", "Installing", "Defining Rulesets", "Lexer Usage", "Customizing Regex Engine", "Miscellaneous", "lex2-py3 (v1.1.1)"], "terms": {"py3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14], "librari": [0, 6, 10, 12, 13, 14], "i": [0, 2, 7, 11, 13, 14, 15], "intend": [0, 11, 15], "lexic": [0, 11, 12, 15], "analysi": [0, 11, 12, 15], "also": [0, 2, 10, 12, 13, 14, 15], "call": [0, 2, 11, 12, 13, 14, 15], "token": [0, 1, 2, 3, 5, 11, 13, 15], "string": [0, 1, 5, 11, 12, 13, 15], "perform": [0, 11, 15], "us": [0, 2, 3, 5, 11, 12, 13, 14, 15], "regular": [0, 3, 11, 15], "express": [0, 3, 11, 15], "regex": [0, 3, 4, 11, 12, 15], "specifi": [0, 7, 11, 12], "user": [0, 11, 12, 13, 15], "defin": [0, 2, 4, 13, 14, 15], "rule": [0, 2, 4, 12, 13, 15], "mechan": 0, "dynam": [0, 5, 11, 15], "ruleset": [0, 2, 12, 13, 14, 15], "stack": [0, 2, 15], "provid": [0, 2, 3, 5, 11, 12, 14, 15], "flexibl": [0, 15], "some": [0, 12, 14, 15], "degre": [0, 15], "runtim": [0, 15], "modul": [0, 3, 6, 7, 13], "class": [0, 2, 3, 4, 5, 11, 12, 13, 14], "function": [0, 2, 5, 7, 12, 13, 14, 15], "repres": [0, 11, 12], "filter": [0, 11], "dure": [0, 11, 12], "__init__": [0, 1, 2, 3, 5, 11, 12, 13], "id": [0, 11, 12], "return": [0, 2, 3, 4, 7, 11, 12, 13], "true": [0, 3, 5, 11, 12, 13], "object": [0, 2, 3, 4, 5, 11, 12, 13], "instanc": [0, 2, 5, 11, 12, 13], "initi": [0, 2, 5, 11, 12], "paramet": [0, 2, 3, 4, 5, 7, 11, 12], "str": [0, 1, 3, 4, 5, 7, 11, 12, 13], "The": [0, 11, 12, 13, 14, 15], "identifi": [0, 1, 2, 3, 11, 12, 13], "name": [0, 7, 11], "result": [0, 11, 12], "e": [0, 11, 12], "g": [0, 11, 12], "number": [0, 5, 11, 12], "word": [0, 11, 12], "matcher": [0, 11, 12, 13, 15], "match": [0, 3, 11, 12, 14, 15], "bool": [0, 3, 5, 7, 11, 12, 13], "option": [0, 2, 5, 11, 12, 13, 14], "whether": [0, 5, 7, 11, 13], "thi": [0, 2, 11, 12, 13, 14], "should": [0, 11, 12], "when": [0, 2, 5, 11, 12, 13, 14], "scan": [0, 11], "By": [0, 2, 11, 12], "default": [0, 2, 11, 12, 13, 14], "rais": [0, 1, 2, 11, 12], "valueerror": [0, 11], "If": [0, 2, 11, 12, 13, 14], "given": [0, 11, 12, 13], "empti": [0, 11], "readonli": [0, 1, 11], "get_match": [0, 11], "get": [0, 2, 3, 5, 11], "imatch": [0, 3, 11, 13, 15], "compat": [0, 11], "lexer": [0, 1, 3, 11, 13, 14, 15], "type": [0, 1, 2, 3, 4, 5, 7, 11, 12], "ptrtype": [0, 8, 11], "set_match": [0, 11], "set": [0, 2, 3, 11, 12, 13, 14], "refer": [0, 11, 13], "rulegroup": [0, 4, 11, 15], "base": [0, 1, 2, 3, 4, 5, 11, 12, 13], "abc": [0, 2, 3, 5, 11, 12], "abstract": [0, 2, 3, 5, 11, 12, 13], "make": [0, 11, 12, 15], "creator": [0, 11], "build": [0, 11], "up": [0, 11], "group": [0, 4, 12, 13, 15], "To": [0, 11, 13], "condens": [0, 11], "down": [0, 11, 13], "singl": [0, 11], "inherit": [0, 11, 12, 13], "method": [0, 2, 11, 12, 13, 14], "regex_prefix": [0, 11], "regex_suffix": [0, 11], "prefix": [0, 11], "everi": [0, 11], "ad": [0, 11], "pattern": [0, 3, 11, 12, 13], "suffix": [0, 11], "none": [0, 11, 12, 13], "compil": [0, 3, 11, 13], "overwrit": [0, 11], "predefin": [0, 4, 11], "parent": [0, 11], "output": [0, 12, 14], "data": [0, 1, 2, 3, 5, 12, 13, 14], "po": [0, 1, 5, 12], "textio": [0, 2, 12, 13, 15], "_textposit": [0, 12], "textposit": [0, 1, 5, 12], "": [0, 1, 3, 5, 10, 11, 12, 13, 14], "posit": [0, 1, 5, 12, 13], "textstream": [0, 1, 2, 3, 5, 13, 14, 15], "where": [0, 1, 12], "occur": [0, 1, 2, 12], "iter": [0, 13, 15], "split": [0, 12], "encapsul": [0, 12, 13], "sequenc": [0, 11, 12], "is_rul": [0, 12], "expected_rul": [0, 12], "evalu": [0, 5, 12], "is_rule_oneof": [0, 12], "one": [0, 5, 12, 14], "list": [0, 1, 11, 12], "validate_rul": [0, 12], "valid": [0, 15], "unknowntokenerror": [0, 1, 2, 12], "doe": [0, 12], "validate_rule_oneof": [0, 12], "lexeropt": [0, 2, 12, 15], "struct": [0, 5, 12], "process": [0, 2, 11, 12], "separatoropt": 0, "separ": [0, 11], "ignor": [0, 11, 12], "flag": 0, "fals": [0, 5, 11, 12, 13], "space": [0, 4, 12], "how": [0, 11, 13, 14], "handl": [0, 12], "tab": [0, 4], "newlin": [0, 4], "id_return": 0, "dict": 0, "map": 0, "kei": 0, "pair": 0, "ilex": [0, 2, 12, 13, 14, 15], "itextio": [0, 5, 12], "common": [0, 5, 6, 14], "interfac": [0, 5, 12, 13, 15], "push_ruleset": [0, 2], "push": [0, 2], "rulesettyp": [0, 2, 11, 12], "pop_ruleset": [0, 2], "pop": [0, 2], "from": [0, 1, 2, 5, 10, 12, 13], "clear_ruleset": [0, 2], "clear": [0, 2, 11], "all": [0, 2, 5, 12, 13], "get_next_token": [0, 2, 12], "find": [0, 2, 11, 12, 14], "next": [0, 2, 12], "current": [0, 2, 5], "activ": [0, 2], "an": [0, 1, 2, 5, 11, 12, 13, 14], "unknown": [0, 1, 2], "ha": [0, 1, 2, 5, 11, 13], "been": [0, 1, 2], "encount": [0, 1, 2], "eof": [0, 1, 2, 12], "reach": [0, 1, 2, 5, 12], "end": [0, 1, 2, 4, 5, 12, 13, 15], "input": [0, 1, 2, 12, 13, 14], "get_opt": [0, 2], "set_opt": [0, 2], "get_uid": [0, 3], "uniqu": [0, 3], "uid": [0, 3], "implement": [0, 2, 3, 5, 12, 13], "compile_pattern": [0, 3, 13], "specif": [0, 3, 11, 15], "t": [0, 2, 3, 13, 14], "look": [0, 3], "itextstream": [0, 3, 5, 13], "manag": [0, 3, 12], "case": [0, 3, 12], "default_lex": [0, 12, 15], "alia": [0, 11], "genericlex": [0, 2], "default_match": [0, 12, 15], "rematch": [0, 3], "make_lex": [0, 12, 13, 14, 15], "matcher_t": [0, 12, 13], "_std_re": 0, "lexer_t": [0, 12, 14], "_generic_lex": 0, "factori": [0, 12, 14], "creat": [0, 11, 12], "valu": [0, 1, 2, 5, 11, 12, 13, 14], "ar": [0, 5, 11, 12], "templat": [0, 4, 12, 13], "constant": [0, 12], "respect": [0, 12], "basematch": [0, 3, 12, 13], "baselex": [0, 2, 12], "compon": [1, 2, 3, 5, 6, 12, 13], "except": [1, 12], "whenev": [1, 12], "receiv": 1, "unexpectedtokenerror": [1, 12], "unexpect": [1, 12], "received_id": 1, "expected_id": 1, "expect": [1, 12], "partial": [2, 3], "abstractlex": 2, "profilerlex": [2, 14], "A": [2, 5, 11, 12, 13], "wrapper": 2, "around": 2, "profil": [2, 15], "close": [2, 5, 12, 14], "delet": [2, 5, 12], "resourc": [2, 5, 12], "show_report": [2, 14], "value_occurrence_threshold": [2, 14], "10": [2, 12, 14], "print": [2, 12], "report": 2, "which": [2, 11, 12], "most": 2, "automat": [2, 12, 13, 14], "hasn": 2, "manual": [2, 10, 12, 14], "yet": [2, 13], "done": [2, 11, 14], "destroi": [2, 14], "garbag": [2, 14], "collector": 2, "after": 2, "int": [2, 5, 12], "threshold": [2, 14], "displai": 2, "top": [2, 12, 14], "lower": [2, 12], "than": 2, "1": [2, 12], "disabl": 2, "entir": 2, "gener": [2, 12, 13], "python": [3, 10, 15], "builtin": [3, 13], "re": [3, 13], "attribut": [4, 8, 13], "comment": [4, 11], "sourcecod": 4, "style": [4, 5, 12], "add_singleline_com": 4, "start_regex": 4, "add": [4, 11], "definit": 4, "singlelin": 4, "denot": 4, "start": [4, 5, 11, 12, 13], "add_multiline_com": 4, "end_regex": 4, "multilin": 4, "charact": [4, 5, 11, 12], "hold": [5, 12], "about": [5, 12], "0": [5, 11, 12], "col": [5, 12], "ln": [5, 12], "absolut": [5, 12], "text": [5, 11, 12, 13], "file": [5, 12, 14], "note": [5, 12], "multi": [5, 12], "byte": [5, 12], "count": [5, 12], "column": [5, 12], "line": [5, 12], "updat": 5, "n": 5, "buffer": [5, 12, 13], "amount": 5, "read": [5, 12], "must": [5, 11, 12, 13], "is_eof": 5, "get_textstream_typ": 5, "enum": 5, "get_text_posit": 5, "get_string_buff": [5, 13], "get_string_buffer_s": [5, 13], "length": [5, 12], "get_string_buffer_posit": 5, "index": [5, 10], "basetextstream": 5, "textstream_typ": 5, "textstreamtyp": 5, "memori": [5, 12], "work": 5, "its": [5, 12, 13], "dispos": 5, "disk": 5, "onli": [5, 12], "part": [5, 11, 12], "avail": 5, "time": [5, 14], "swap": 5, "chunk": [5, 12], "textstreamdisk": 5, "stream": [5, 11, 12], "fp": [5, 12], "buffer_s": [5, 12], "encod": [5, 12], "convert_line_end": [5, 12], "union": 5, "path": [5, 12], "open": [5, 12], "size": [5, 12], "kilobyt": [5, 12], "kb": [5, 12], "zero": [5, 12], "alloc": [5, 12], "whole": [5, 12], "In": [5, 11, 12, 13, 14], "order": [5, 11, 12, 15], "complet": [5, 12], "captur": [5, 12], "smaller": [5, 12], "equal": [5, 12], "half": [5, 12], "floor": [5, 12], "nearest": [5, 12], "even": [5, 12], "convert": [5, 12], "window": [5, 12], "unix": [5, 12], "textstreammemori": 5, "str_data": [5, 12], "directli": [5, 12, 13], "load": [5, 12], "depend": [5, 7, 12], "system": [5, 12], "wide": [5, 12], "512": [5, 12], "utf": [5, 12], "8": [5, 12], "textfil": [5, 12], "check": [7, 12, 13], "is_module_instal": 7, "module_nam": 7, "instal": [7, 15], "variabl": [8, 11, 13], "hint": [8, 11], "typedef": 8, "simul": 8, "pointer": 8, "voidptrtyp": 8, "void": 8, "lex2": [10, 11, 12, 13, 14], "As": [10, 12], "per": 10, "usual": 10, "you": [10, 11, 13, 14], "can": [10, 11, 12, 13, 14], "packag": [10, 12], "pypi": 10, "through": [10, 11, 12, 13, 15], "pip": 10, "choos": 10, "includ": [10, 11, 12, 14], "your": [10, 11, 13], "project": 10, "clone": 10, "download": 10, "snapshot": 10, "repositori": 10, "github": 10, "copi": 10, "folder": 10, "purpos": 11, "break": [11, 12], "assign": [11, 13], "thu": [11, 13], "mean": [11, 12, 14], "befor": 11, "recogn": 11, "cours": 11, "first": [11, 12, 14], "possibl": [11, 13], "thei": 11, "each": [11, 12, 13], "particular": 11, "what": [11, 12], "familiar": 11, "quickstart": 11, "guid": 11, "info": [11, 12], "good": 11, "point": 11, "addit": [11, 15], "configur": 11, "intern": 11, "exampl": [11, 12, 15], "program": [11, 15], "languag": [11, 12, 15], "alwai": 11, "therefor": [11, 12], "parser": [11, 12], "howev": 11, "them": 11, "skip": [11, 13], "instanti": [11, 13, 15], "number_rul": 11, "integ": 11, "r": [11, 12], "d": 11, "inspect": 11, "chang": 11, "behaviour": [11, 12, 13], "properti": 11, "yourself": 11, "write": [11, 14], "boilerpl": 11, "code": 11, "format": [11, 12], "just": [11, 12, 13], "would": [11, 14], "like": [11, 13], "layer": 11, "altogeth": 11, "opt": 11, "block": [11, 12], "below": [11, 12, 13], "mail": 11, "domain": 11, "address": 11, "allowedemail": 11, "def": [11, 13], "self": [11, 13], "super": [11, 13], "email": 11, "z": [11, 12], "d_": 11, "public": 11, "It": [11, 12, 13], "protect": 11, "_add_regex_group": 11, "add_provid": 11, "tld": 11, "fr": 11, "allowed_email": 11, "gmail": 11, "com": 11, "hotmail": 11, "singular": 11, "convent": 11, "custom": [11, 12, 15], "themselv": 11, "so": [11, 13, 14], "have": 11, "chain": 11, "final": 11, "standard": 11, "popul": 11, "recommend": 11, "store": [11, 13], "za": [11, 12], "9": [11, 12], "punctuat": [11, 12], "multipl": 11, "reus": 11, "earlier": 11, "better": 11, "mimic": 12, "found": [12, 13], "c": 12, "rust": 12, "need": [12, 13], "two": 12, "consecut": 12, "follow": [12, 13], "These": 12, "adequ": 12, "see": [12, 13, 14], "engin": [12, 15], "support": 12, "both": 12, "best": [12, 13], "practic": [12, 14, 15], "For": [12, 13], "sub": 12, "level": 12, "content": 12, "expos": 12, "while": [12, 13], "correspond": [12, 13], "uml": [12, 13], "diagram": [12, 13], "visual": [12, 13], "summar": [12, 13], "relationship": [12, 13], "between": [12, 13], "discuss": [12, 13], "becaus": [12, 13], "alreadi": [12, 14], "pass": [12, 13], "either": [12, 14], "larg": 12, "txt": 12, "new": 12, "previou": 12, "onc": 12, "prepar": 12, "back": 12, "caller": 12, "signal": 12, "let": 12, "know": 12, "out": [12, 13], "main": 12, "lex": [12, 13], "loop": 12, "form": 12, "contain": [12, 14], "inform": [12, 14], "tri": 12, "try": [12, 13, 14], "catch": 12, "requir": 12, "same": 12, "higher": 12, "exhaust": 12, "exc": [12, 15], "f": 12, "12": 12, "15": 12, "6": 12, "16": 12, "tree": 12, "ast": 12, "punc": 12, "event": 13, "inadequ": 13, "substitut": 13, "own": 13, "choic": [13, 15], "essenti": 13, "mai": 13, "benefici": 13, "understand": 13, "wai": 13, "util": [13, 15], "respons": 13, "carri": 13, "accord": 13, "immedi": 13, "accordingli": 13, "otherwis": 13, "appropri": 13, "do": [13, 14], "over": 13, "access": 13, "boolean": 13, "indic": 13, "wa": 13, "explain": 13, "illustr": 13, "matthew": 13, "barnett": 13, "There": 13, "few": 13, "constructor": 13, "via": 13, "anoth": [13, 14], "import": 13, "rgx": 13, "custommatch": 13, "_pattern": 13, "regex_match": 13, "get_string_buffer_po": 13, "argument": 13, "constantli": 13, "dictionari": 13, "lookup": 13, "caus": [13, 14], "notic": 13, "slowdown": [13, 14], "larger": 13, "oper": [13, 14], "henc": 13, "privat": 13, "shown": [13, 14], "_string_buff": 13, "_string_buffer_po": 13, "_string_buffer_s": 13, "section": 14, "due": 14, "design": [14, 15], "sequenti": 14, "put": 14, "last": 14, "compar": 14, "built": 14, "basic": 14, "more": 14, "easili": [14, 15], "optim": 14, "simpli": 14, "collect": 14, "occurr": 14, "show": 14, "wasn": 14, "wish": 14, "redirect": 14, "page": 14, "written": 15, "platform": 15, "independ": 15, "pure": 15, "python3": 15, "portabl": 15, "usag": 15, "featur": 15, "straightforward": 15, "port": 15, "other": 15, "furthermor": 15, "enabl": 15, "integr": 15, "ani": 15, "extern": 15, "simpl": 15, "unifi": 15, "o": 15, "underli": 15, "architectur": 15, "improv": 15, "miscellan": 15, "predef": 15}, "objects": {"_.lex2": [[12, 0, 1, "lex2.make_lexer", "make_lexer"]], "": [[0, 1, 0, "module-0", "lex2"]], "lex2": [[0, 2, 1, "", "DEFAULT_LEXER"], [0, 2, 1, "", "DEFAULT_MATCHER"], [0, 3, 1, "", "ILexer"], [0, 3, 1, "", "IMatcher"], [0, 3, 1, "", "LexerOptions"], [11, 3, 1, "", "Rule"], [11, 3, 1, "", "RuleGroup"], [12, 3, 1, "", "Token"], [1, 1, 0, "module-0", "excs"], [2, 1, 0, "module-0", "lexer"], [0, 0, 1, "", "make_lexer"], [3, 1, 0, "module-0", "matcher"], [4, 1, 0, "module-0", "predefs"], [5, 1, 0, "module-0", "textio"], [6, 1, 0, "module-0", "util"]], "lex2.ILexer": [[0, 4, 1, "", "clear_rulesets"], [0, 4, 1, "", "get_next_token"], [0, 4, 1, "", "get_options"], [0, 4, 1, "", "pop_ruleset"], [0, 4, 1, "", "push_ruleset"], [0, 4, 1, "", "set_options"]], "lex2.IMatcher": [[0, 4, 1, "", "compile_pattern"], [0, 4, 1, "", "get_uid"], [0, 4, 1, "", "match"]], "lex2.LexerOptions": [[0, 3, 1, "", "SeparatorOptions"], [0, 4, 1, "", "__init__"], [0, 2, 1, "", "id_returns"], [0, 2, 1, "", "newline"], [0, 2, 1, "", "space"], [0, 2, 1, "", "tab"]], "lex2.LexerOptions.SeparatorOptions": [[0, 4, 1, "", "__init__"], [0, 2, 1, "", "ignored"], [0, 2, 1, "", "returns"]], "lex2.Rule": [[11, 4, 1, "", "__init__"], [11, 4, 1, "", "get_matcher"], [11, 2, 1, "", "id"], [11, 2, 1, "", "regex"], [11, 2, 1, "", "returns"], [11, 4, 1, "", "set_matcher"]], "lex2.RuleGroup": [[11, 4, 1, "", "__init__"], [11, 4, 1, "", "rule"]], "lex2.Token": [[12, 4, 1, "", "__init__"], [12, 2, 1, "", "data"], [12, 2, 1, "", "groups"], [12, 2, 1, "", "id"], [12, 4, 1, "", "is_rule"], [12, 4, 1, "", "is_rule_oneof"], [12, 2, 1, "", "pos"], [12, 4, 1, "", "validate_rule"], [12, 4, 1, "", "validate_rule_oneof"]], "lex2.excs": [[1, 5, 1, "", "EOF"], [1, 5, 1, "", "UnexpectedTokenError"], [1, 5, 1, "", "UnknownTokenError"]], "lex2.excs.EOF": [[1, 4, 1, "", "__init__"]], "lex2.excs.UnexpectedTokenError": [[1, 4, 1, "", "__init__"], [1, 2, 1, "", "data"], [1, 2, 1, "", "expected_ids"], [1, 2, 1, "", "pos"], [1, 2, 1, "", "received_id"]], "lex2.excs.UnknownTokenError": [[1, 4, 1, "", "__init__"], [1, 2, 1, "", "data"], [1, 2, 1, "", "pos"]], "lex2.lexer": [[2, 3, 1, "", "BaseLexer"], [2, 3, 1, "", "GenericLexer"], [2, 3, 1, "", "ProfilerLexer"]], "lex2.lexer.BaseLexer": [[2, 4, 1, "", "__init__"], [2, 4, 1, "", "clear_rulesets"], [2, 4, 1, "", "get_options"], [2, 4, 1, "", "pop_ruleset"], [2, 4, 1, "", "push_ruleset"], [2, 4, 1, "", "set_options"]], "lex2.lexer.GenericLexer": [[2, 4, 1, "", "__init__"], [2, 4, 1, "", "get_next_token"]], "lex2.lexer.ProfilerLexer": [[2, 4, 1, "", "__init__"], [2, 4, 1, "", "close"], [2, 4, 1, "", "get_next_token"], [2, 4, 1, "", "show_report"]], "lex2.matcher": [[3, 3, 1, "", "BaseMatcher"], [3, 3, 1, "", "ReMatcher"]], "lex2.matcher.BaseMatcher": [[3, 4, 1, "", "__init__"], [3, 4, 1, "", "get_uid"]], "lex2.matcher.ReMatcher": [[3, 4, 1, "", "__init__"], [3, 4, 1, "", "compile_pattern"], [3, 4, 1, "", "match"]], "lex2.predefs": [[4, 3, 1, "", "Comments"], [4, 6, 1, "", "newline"], [4, 6, 1, "", "space"], [4, 6, 1, "", "tab"]], "lex2.predefs.Comments": [[4, 4, 1, "", "add_multiline_comment"], [4, 4, 1, "", "add_singleline_comment"]], "lex2.textio": [[5, 3, 1, "", "BaseTextstream"], [12, 3, 1, "", "ITextIO"], [5, 3, 1, "", "ITextstream"], [5, 3, 1, "", "TextIO"], [12, 3, 1, "", "TextPosition"], [5, 3, 1, "", "TextstreamDisk"], [5, 3, 1, "", "TextstreamMemory"], [5, 3, 1, "", "TextstreamType"]], "lex2.textio.BaseTextstream": [[5, 4, 1, "", "__init__"], [5, 4, 1, "", "get_string_buffer"], [5, 4, 1, "", "get_string_buffer_position"], [5, 4, 1, "", "get_string_buffer_size"], [5, 4, 1, "", "get_text_position"], [5, 4, 1, "", "get_textstream_type"], [5, 4, 1, "", "is_eof"]], "lex2.textio.ITextIO": [[12, 4, 1, "", "close"], [12, 4, 1, "", "load"], [12, 4, 1, "", "open"]], "lex2.textio.ITextstream": [[5, 4, 1, "", "close"], [5, 4, 1, "", "get_string_buffer"], [5, 4, 1, "", "get_string_buffer_position"], [5, 4, 1, "", "get_string_buffer_size"], [5, 4, 1, "", "get_text_position"], [5, 4, 1, "", "get_textstream_type"], [5, 4, 1, "", "is_eof"], [5, 4, 1, "", "update"]], "lex2.textio.TextIO": [[5, 4, 1, "", "__init__"], [5, 4, 1, "", "close"], [5, 4, 1, "", "load"], [5, 4, 1, "", "open"]], "lex2.textio.TextPosition": [[12, 4, 1, "", "__init__"], [12, 2, 1, "", "col"], [12, 2, 1, "", "ln"], [12, 2, 1, "", "pos"]], "lex2.textio.TextstreamDisk": [[5, 4, 1, "", "__init__"], [5, 4, 1, "", "close"], [5, 4, 1, "", "update"]], "lex2.textio.TextstreamMemory": [[5, 4, 1, "", "__init__"], [5, 4, 1, "", "close"], [5, 4, 1, "", "update"]], "lex2.util": [[7, 1, 0, "module-0", "deps"], [8, 1, 0, "module-0", "types"]], "lex2.util.deps": [[7, 0, 1, "", "is_module_installed"]], "lex2.util.types": [[8, 6, 1, "", "PtrType"], [8, 6, 1, "", "VoidptrType"]]}, "objtypes": {"0": "py:function", "1": "py:module", "2": "py:attribute", "3": "py:class", "4": "py:method", "5": "py:exception", "6": "py:data"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "module", "Python module"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "exception", "Python exception"], "6": ["py", "data", "Python data"]}, "titleterms": {"lex2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 15], "exc": 1, "lexer": [2, 12], "matcher": 3, "predef": 4, "textio": 5, "util": [6, 7, 8], "dep": 7, "type": 8, "instal": 10, "defin": 11, "ruleset": 11, "rule": [11, 14], "group": 11, "usag": 12, "instanti": 12, "textstream": 12, "i": 12, "o": 12, "iter": 12, "token": 12, "valid": 12, "custom": 13, "regex": 13, "engin": 13, "underli": 13, "architectur": 13, "practic": 13, "exampl": 13, "improv": [13, 14], "match": 13, "perform": [13, 14], "python": 13, "miscellan": 14, "profil": 14, "order": 14, "py3": 15, "v1": 15, "1": 15, "librari": 15, "guid": 15, "api": 15, "refer": 15}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"lex2": [[0, "lex2"]], "lex2.excs": [[1, "lex2-excs"]], "lex2.lexer": [[2, "lex2-lexer"]], "lex2.matcher": [[3, "lex2-matcher"]], "lex2.predefs": [[4, "lex2-predefs"]], "lex2.textio": [[5, "lex2-textio"]], "lex2.util": [[6, "lex2-util"]], "lex2.util.deps": [[7, "lex2-util-deps"]], "lex2.util.types": [[8, "lex2-util-types"]], "Installing": [[10, "installing"]], "Defining Rulesets": [[11, "defining-rulesets"]], "Rules": [[11, "rules"]], "Rule Groups": [[11, "rule-groups"]], "Ruleset": [[11, "ruleset"]], "Lexer Usage": [[12, "lexer-usage"]], "Instantiation": [[12, "instantiation"]], "Textstream I/O": [[12, "textstream-i-o"]], "Iteration and Tokenization": [[12, "iteration-and-tokenization"]], "Token Validation": [[12, "token-validation"]], "Customizing Regex Engine": [[13, "customizing-regex-engine"]], "Underlying Architecture": [[13, "underlying-architecture"]], "Practical Example": [[13, "practical-example"]], "Improving match() Performance on Python": [[13, "improving-match-performance-on-python"]], "Miscellaneous": [[14, "miscellaneous"]], "Profiling Order of Rules (Improving Performance)": [[14, "profiling-order-of-rules-improving-performance"]], "lex2-py3 (v1.1.1)": [[15, "project-release"]], "Library Guide": [[15, null]], "API Reference": [[15, null]]}, "indexentries": {"default_lexer (in module lex2)": [[0, "lex2.DEFAULT_LEXER"]], "default_matcher (in module lex2)": [[0, "lex2.DEFAULT_MATCHER"]], "ilexer (class in lex2)": [[0, "lex2.ILexer"]], "imatcher (class in lex2)": [[0, "lex2.IMatcher"]], "lexeroptions (class in lex2)": [[0, "lex2.LexerOptions"]], "lexeroptions.separatoroptions (class in lex2)": [[0, "lex2.LexerOptions.SeparatorOptions"]], "rule (class in lex2)": [[0, "lex2.Rule"], [11, "lex2.Rule"]], "rulegroup (class in lex2)": [[0, "lex2.RuleGroup"], [11, "lex2.RuleGroup"]], "token (class in lex2)": [[0, "lex2.Token"], [12, "lex2.Token"]], "__init__() (lex2.lexeroptions method)": [[0, "lex2.LexerOptions.__init__"]], "__init__() (lex2.lexeroptions.separatoroptions method)": [[0, "lex2.LexerOptions.SeparatorOptions.__init__"]], "__init__() (lex2.rule method)": [[0, "lex2.Rule.__init__"], [11, "lex2.Rule.__init__"]], "__init__() (lex2.rulegroup method)": [[0, "lex2.RuleGroup.__init__"], [11, "lex2.RuleGroup.__init__"]], "__init__() (lex2.token method)": [[0, "lex2.Token.__init__"], [12, "lex2.Token.__init__"]], "clear_rulesets() (lex2.ilexer method)": [[0, "lex2.ILexer.clear_rulesets"]], "compile_pattern() (lex2.imatcher method)": [[0, "lex2.IMatcher.compile_pattern"]], "data (lex2.token attribute)": [[0, "lex2.Token.data"], [12, "lex2.Token.data"]], "get_matcher() (lex2.rule method)": [[0, "lex2.Rule.get_matcher"], [11, "lex2.Rule.get_matcher"]], "get_next_token() (lex2.ilexer method)": [[0, "lex2.ILexer.get_next_token"]], "get_options() (lex2.ilexer method)": [[0, "lex2.ILexer.get_options"]], "get_uid() (lex2.imatcher method)": [[0, "lex2.IMatcher.get_uid"]], "groups (lex2.token attribute)": [[0, "lex2.Token.groups"], [12, "lex2.Token.groups"]], "id (lex2.rule attribute)": [[0, "lex2.Rule.id"], [11, "lex2.Rule.id"]], "id (lex2.token attribute)": [[0, "lex2.Token.id"], [12, "lex2.Token.id"]], "id_returns (lex2.lexeroptions attribute)": [[0, "lex2.LexerOptions.id_returns"]], "ignored (lex2.lexeroptions.separatoroptions attribute)": [[0, "lex2.LexerOptions.SeparatorOptions.ignored"]], "is_rule() (lex2.token method)": [[0, "lex2.Token.is_rule"], [12, "lex2.Token.is_rule"]], "is_rule_oneof() (lex2.token method)": [[0, "lex2.Token.is_rule_oneof"], [12, "lex2.Token.is_rule_oneof"]], "lex2": [[0, "module-0"], [0, "module-lex2"]], "make_lexer() (in module lex2)": [[0, "lex2.make_lexer"]], "match() (lex2.imatcher method)": [[0, "lex2.IMatcher.match"]], "module": [[0, "module-0"], [0, "module-lex2"], [1, "module-0"], [1, "module-lex2.excs"], [2, "module-0"], [2, "module-lex2.lexer"], [3, "module-0"], [3, "module-lex2.matcher"], [4, "module-0"], [4, "module-lex2.predefs"], [5, "module-0"], [5, "module-lex2.textio"], [6, "module-0"], [6, "module-lex2.util"], [7, "module-0"], [7, "module-lex2.util.deps"], [8, "module-0"], [8, "module-lex2.util.types"]], "newline (lex2.lexeroptions attribute)": [[0, "lex2.LexerOptions.newline"]], "pop_ruleset() (lex2.ilexer method)": [[0, "lex2.ILexer.pop_ruleset"]], "pos (lex2.token attribute)": [[0, "lex2.Token.pos"], [12, "lex2.Token.pos"]], "push_ruleset() (lex2.ilexer method)": [[0, "lex2.ILexer.push_ruleset"]], "regex (lex2.rule attribute)": [[0, "lex2.Rule.regex"], [11, "lex2.Rule.regex"]], "returns (lex2.lexeroptions.separatoroptions attribute)": [[0, "lex2.LexerOptions.SeparatorOptions.returns"]], "returns (lex2.rule attribute)": [[0, "lex2.Rule.returns"], [11, "lex2.Rule.returns"]], "rule() (lex2.rulegroup method)": [[0, "lex2.RuleGroup.rule"], [11, "lex2.RuleGroup.rule"]], "set_matcher() (lex2.rule method)": [[0, "lex2.Rule.set_matcher"], [11, "lex2.Rule.set_matcher"]], "set_options() (lex2.ilexer method)": [[0, "lex2.ILexer.set_options"]], "space (lex2.lexeroptions attribute)": [[0, "lex2.LexerOptions.space"]], "tab (lex2.lexeroptions attribute)": [[0, "lex2.LexerOptions.tab"]], "validate_rule() (lex2.token method)": [[0, "lex2.Token.validate_rule"], [12, "lex2.Token.validate_rule"]], "validate_rule_oneof() (lex2.token method)": [[0, "lex2.Token.validate_rule_oneof"], [12, "lex2.Token.validate_rule_oneof"]], "eof": [[1, "lex2.excs.EOF"]], "unexpectedtokenerror": [[1, "lex2.excs.UnexpectedTokenError"]], "unknowntokenerror": [[1, "lex2.excs.UnknownTokenError"]], "__init__() (lex2.excs.eof method)": [[1, "lex2.excs.EOF.__init__"]], "__init__() (lex2.excs.unexpectedtokenerror method)": [[1, "lex2.excs.UnexpectedTokenError.__init__"]], "__init__() (lex2.excs.unknowntokenerror method)": [[1, "lex2.excs.UnknownTokenError.__init__"]], "data (lex2.excs.unexpectedtokenerror attribute)": [[1, "lex2.excs.UnexpectedTokenError.data"]], "data (lex2.excs.unknowntokenerror attribute)": [[1, "lex2.excs.UnknownTokenError.data"]], "expected_ids (lex2.excs.unexpectedtokenerror attribute)": [[1, "lex2.excs.UnexpectedTokenError.expected_ids"]], "lex2.excs": [[1, "module-0"], [1, "module-lex2.excs"]], "pos (lex2.excs.unexpectedtokenerror attribute)": [[1, "lex2.excs.UnexpectedTokenError.pos"]], "pos (lex2.excs.unknowntokenerror attribute)": [[1, "lex2.excs.UnknownTokenError.pos"]], "received_id (lex2.excs.unexpectedtokenerror attribute)": [[1, "lex2.excs.UnexpectedTokenError.received_id"]], "baselexer (class in lex2.lexer)": [[2, "lex2.lexer.BaseLexer"]], "genericlexer (class in lex2.lexer)": [[2, "lex2.lexer.GenericLexer"]], "profilerlexer (class in lex2.lexer)": [[2, "lex2.lexer.ProfilerLexer"]], "__init__() (lex2.lexer.baselexer method)": [[2, "lex2.lexer.BaseLexer.__init__"]], "__init__() (lex2.lexer.genericlexer method)": [[2, "lex2.lexer.GenericLexer.__init__"]], "__init__() (lex2.lexer.profilerlexer method)": [[2, "lex2.lexer.ProfilerLexer.__init__"]], "clear_rulesets() (lex2.lexer.baselexer method)": [[2, "lex2.lexer.BaseLexer.clear_rulesets"]], "close() (lex2.lexer.profilerlexer method)": [[2, "lex2.lexer.ProfilerLexer.close"]], "get_next_token() (lex2.lexer.genericlexer method)": [[2, "lex2.lexer.GenericLexer.get_next_token"]], "get_next_token() (lex2.lexer.profilerlexer method)": [[2, "lex2.lexer.ProfilerLexer.get_next_token"]], "get_options() (lex2.lexer.baselexer method)": [[2, "lex2.lexer.BaseLexer.get_options"]], "lex2.lexer": [[2, "module-0"], [2, "module-lex2.lexer"]], "pop_ruleset() (lex2.lexer.baselexer method)": [[2, "lex2.lexer.BaseLexer.pop_ruleset"]], "push_ruleset() (lex2.lexer.baselexer method)": [[2, "lex2.lexer.BaseLexer.push_ruleset"]], "set_options() (lex2.lexer.baselexer method)": [[2, "lex2.lexer.BaseLexer.set_options"]], "show_report() (lex2.lexer.profilerlexer method)": [[2, "lex2.lexer.ProfilerLexer.show_report"]], "basematcher (class in lex2.matcher)": [[3, "lex2.matcher.BaseMatcher"]], "rematcher (class in lex2.matcher)": [[3, "lex2.matcher.ReMatcher"]], "__init__() (lex2.matcher.basematcher method)": [[3, "lex2.matcher.BaseMatcher.__init__"]], "__init__() (lex2.matcher.rematcher method)": [[3, "lex2.matcher.ReMatcher.__init__"]], "compile_pattern() (lex2.matcher.rematcher method)": [[3, "lex2.matcher.ReMatcher.compile_pattern"]], "get_uid() (lex2.matcher.basematcher method)": [[3, "lex2.matcher.BaseMatcher.get_uid"]], "lex2.matcher": [[3, "module-0"], [3, "module-lex2.matcher"]], "match() (lex2.matcher.rematcher method)": [[3, "lex2.matcher.ReMatcher.match"]], "comments (class in lex2.predefs)": [[4, "lex2.predefs.Comments"]], "add_multiline_comment() (lex2.predefs.comments method)": [[4, "lex2.predefs.Comments.add_multiline_comment"]], "add_singleline_comment() (lex2.predefs.comments method)": [[4, "lex2.predefs.Comments.add_singleline_comment"]], "lex2.predefs": [[4, "module-0"], [4, "module-lex2.predefs"]], "newline (in module lex2.predefs)": [[4, "lex2.predefs.newline"]], "space (in module lex2.predefs)": [[4, "lex2.predefs.space"]], "tab (in module lex2.predefs)": [[4, "lex2.predefs.tab"]], "basetextstream (class in lex2.textio)": [[5, "lex2.textio.BaseTextstream"]], "itextio (class in lex2.textio)": [[5, "lex2.textio.ITextIO"], [12, "lex2.textio.ITextIO"]], "itextstream (class in lex2.textio)": [[5, "lex2.textio.ITextstream"]], "textio (class in lex2.textio)": [[5, "lex2.textio.TextIO"]], "textposition (class in lex2.textio)": [[5, "lex2.textio.TextPosition"], [12, "lex2.textio.TextPosition"]], "textstreamdisk (class in lex2.textio)": [[5, "lex2.textio.TextstreamDisk"]], "textstreammemory (class in lex2.textio)": [[5, "lex2.textio.TextstreamMemory"]], "textstreamtype (class in lex2.textio)": [[5, "lex2.textio.TextstreamType"]], "__init__() (lex2.textio.basetextstream method)": [[5, "lex2.textio.BaseTextstream.__init__"]], "__init__() (lex2.textio.textio method)": [[5, "lex2.textio.TextIO.__init__"]], "__init__() (lex2.textio.textposition method)": [[5, "lex2.textio.TextPosition.__init__"], [12, "lex2.textio.TextPosition.__init__"]], "__init__() (lex2.textio.textstreamdisk method)": [[5, "lex2.textio.TextstreamDisk.__init__"]], "__init__() (lex2.textio.textstreammemory method)": [[5, "lex2.textio.TextstreamMemory.__init__"]], "close() (lex2.textio.itextio method)": [[5, "lex2.textio.ITextIO.close"], [12, "lex2.textio.ITextIO.close"]], "close() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.close"]], "close() (lex2.textio.textio method)": [[5, "lex2.textio.TextIO.close"]], "close() (lex2.textio.textstreamdisk method)": [[5, "lex2.textio.TextstreamDisk.close"]], "close() (lex2.textio.textstreammemory method)": [[5, "lex2.textio.TextstreamMemory.close"]], "col (lex2.textio.textposition attribute)": [[5, "lex2.textio.TextPosition.col"], [12, "lex2.textio.TextPosition.col"]], "get_string_buffer() (lex2.textio.basetextstream method)": [[5, "lex2.textio.BaseTextstream.get_string_buffer"]], "get_string_buffer() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.get_string_buffer"]], "get_string_buffer_position() (lex2.textio.basetextstream method)": [[5, "lex2.textio.BaseTextstream.get_string_buffer_position"]], "get_string_buffer_position() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.get_string_buffer_position"]], "get_string_buffer_size() (lex2.textio.basetextstream method)": [[5, "lex2.textio.BaseTextstream.get_string_buffer_size"]], "get_string_buffer_size() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.get_string_buffer_size"]], "get_text_position() (lex2.textio.basetextstream method)": [[5, "lex2.textio.BaseTextstream.get_text_position"]], "get_text_position() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.get_text_position"]], "get_textstream_type() (lex2.textio.basetextstream method)": [[5, "lex2.textio.BaseTextstream.get_textstream_type"]], "get_textstream_type() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.get_textstream_type"]], "is_eof() (lex2.textio.basetextstream method)": [[5, "lex2.textio.BaseTextstream.is_eof"]], "is_eof() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.is_eof"]], "lex2.textio": [[5, "module-0"], [5, "module-lex2.textio"]], "ln (lex2.textio.textposition attribute)": [[5, "lex2.textio.TextPosition.ln"], [12, "lex2.textio.TextPosition.ln"]], "load() (lex2.textio.itextio method)": [[5, "lex2.textio.ITextIO.load"], [12, "lex2.textio.ITextIO.load"]], "load() (lex2.textio.textio method)": [[5, "lex2.textio.TextIO.load"]], "open() (lex2.textio.itextio method)": [[5, "lex2.textio.ITextIO.open"], [12, "lex2.textio.ITextIO.open"]], "open() (lex2.textio.textio method)": [[5, "lex2.textio.TextIO.open"]], "pos (lex2.textio.textposition attribute)": [[5, "lex2.textio.TextPosition.pos"], [12, "lex2.textio.TextPosition.pos"]], "update() (lex2.textio.itextstream method)": [[5, "lex2.textio.ITextstream.update"]], "update() (lex2.textio.textstreamdisk method)": [[5, "lex2.textio.TextstreamDisk.update"]], "update() (lex2.textio.textstreammemory method)": [[5, "lex2.textio.TextstreamMemory.update"]], "lex2.util": [[6, "module-0"], [6, "module-lex2.util"]], "is_module_installed() (in module lex2.util.deps)": [[7, "lex2.util.deps.is_module_installed"]], "lex2.util.deps": [[7, "module-0"], [7, "module-lex2.util.deps"]], "ptrtype (in module lex2.util.types)": [[8, "lex2.util.types.PtrType"]], "voidptrtype (in module lex2.util.types)": [[8, "lex2.util.types.VoidptrType"]], "lex2.util.types": [[8, "module-0"], [8, "module-lex2.util.types"]], "lex2.make_lexer() (in module _)": [[12, "lex2.make_lexer"]]}})